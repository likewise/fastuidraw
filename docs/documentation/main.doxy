/*!
  \file main.doxy
  \brief main.doxy
 */

/*!
\defgroup Utility Utility
@{
\brief
Utility provides simple utility classes, the most important and
commonly used ones being \ref reference_counted_ptr, \ref vecN,
and \ref c_array. Part of the main library libFastUIDraw.
@}

\defgroup Text Text
@{
\brief
Text provides the interfaces to realizing glyph data for rendering
glyphs. The big classes being \ref Glyph, \ref GlyphCache, \ref
GlyphAtlas and \ref FontBase. Part of the main library libFastUIDraw.
@}

\defgroup Paths Paths
@{
\brief
Path provides the interface to realize paths, the main entry point
for applications is the object \ref Path.
@}

\defgroup Imaging Imaging
@{
\brief
Imaging provides the interface to realize images
and color gradients.
@}

\defgroup GLSL GLSL
@{
\brief
Utility module to assist in creating GLSL shaders and also provides
\ref fastuidraw::glsl::PainterShaderRegistrarGLSL which provides
shader assembly and default shaders via GLSL shaders. The GL backend
via the class \ref fastuidraw::gl::PainterEngineGL builds off of
\ref fastuidraw::glsl::PainterShaderRegistrarGLSL in that its
\ref fastuidraw::PainterEngine::painter_shader_registrar() method
returns an object derived from \ref fastuidraw::glsl::PainterShaderRegistrarGLSL.
Part of the main library libFastUIDraw.
@}

\defgroup GLSLVertFragCode GLSL Vertex Fragment Code
@{
\brief
This group documents the GLSL functions fastuidraw makes available
to GLSL code fragments for both vertex and fragment shading for
custom shading as embodied by the classes \ref
fastuidraw::glsl::PainterItemShaderGLSL, \ref
fastuidraw::glsl::PainterBlendShaderGLSL and \ref
fastuidraw::glsl::PainterCustomBrushShaderGLSL.
@}

\defgroup GLSLVertCode GLSL Vertex Code
@{
\brief
This group documents the GLSL functions fastuidraw makes available
to GLSL code fragments for only vertex shading for custom shading
as embodied by the classes \ref fastuidraw::glsl::PainterItemShaderGLSL,
\ref fastuidraw::glsl::PainterBlendShaderGLSL and \ref
fastuidraw::glsl::PainterCustomBrushShaderGLSL.
@}

\defgroup GLSLFragCode GLSL Fragment Code
@{
\brief
This group documents the GLSL functions fastuidraw makes available
to GLSL code fragments for only fragment shader for custom shading
as embodied by the classes \ref fastuidraw::glsl::PainterItemShaderGLSL,
\ref fastuidraw::glsl::PainterBlendShaderGLSL and \ref
fastuidraw::glsl::PainterCustomBrushShaderGLSL.
@}

\defgroup Painter Painter
@{
\brief
Painter provides the interface for Canvas drawing, the most important class
being Painter. Part of the main library libFastUIDraw.
@}

\defgroup PainterAttribute Painter Attribute
@{
\brief
Painter Attribute provides the interface to define the attribute data
to be used by shaders. This includes how glyphs, stroked paths and filled
paths are realized as attribute data.

The class \ref fastuidraw::PainterAttribute represents a single attribute
(the what to draw). FastUIDraw works -exclusively- in drawing triangles
and the indices of the what to draw are realized as \ref fastuidraw::PainterIndex.
The class \ref fastuidraw::PainterAttributeData represents a collection
of attribute and indices to draw.

If the attribute and/or index data needs to be dynamic (but the CPU cost
should be low), the class \ref fastuidraw::PainterAttributeDataFiller
can be used. One example of its use is \ref fastuidraw::GlyphRun which
uses it to select what sub-range of indices to feed to draw only a portion
of text.
@}

\defgroup PainterShaders Painter Shaders
@{
\brief
Painter Shaders defines the interface how to specify shaders used by
\ref Painter to render items. There are four types of shaders
- \ref fastuidraw::PainterItemShader represents the shader code to
  perform vertex and fragment processing on an item.
- \ref fastuidraw::PainterBrush and \ref fastuidraw::PainterCustomBrush
  represent the shader code to compute the color that that brush
  applies
- \ref fastuidraw::PainterBlendShader represents the shader code to
  perform blending.
- \ref fastuidraw::PainterItemCoverageShader is an auxiliary shader
  that can be used by a \ref fastuidraw::PainterItemShader to compute
  a coverage value for the purpose of two-pass rendering.


Each of these shaders can fetch shader-data to modify their processing
(for example an item shader for stroking a path would fetch the stroking
width in the vertex shader). The classes for realizing the shader-data
are
- \ref fastuidraw::PainterItemShaderData for both \ref fastuidraw::PainterItemShader
  and \ref fastuidraw::PainterItemCoverageShader
- \ref fastuidraw::PainterBlendShaderData for \ref fastuidraw::PainterBlendShader
- \ref fastuidraw::PainterBrush for the built-in brush of FastUIDraw
- \ref fastuidraw::PainterBrushShaderData for \ref fastuidraw::PainterCustomBrushShader
  for custom brushes


Each of these objects can be passed to a \ref fastuidraw::Painter drawing method
by address with the class \ref fastuidraw::PainterData. In addition, if a value
is to be reused in several drawing calls to \ref fastuidraw::Painter, one can use
the interface of \ref fastuidraw::PainterPackedValuePool (fetched from \ref
fastuidraw::Painter::packed_value_pool()) to realize a \ref fastuidraw::PainterPackedValue
which represents the value immutably packed for the GPU in such a way that its packing
into the GPU can be dramatically reused within a frame.
@}

\defgroup PainterBackend Painter Backend
@{
\brief
If one is making a painter backend, then this group provides the
information, see particularly the enumerations in fastuidraw::PainterHeader,
fastuidraw::PainterItemMatrix, fastuidraw::PainterClipEquations
for how data is packed by fastuidraw::Painter. Part of the main library
libFastUIDraw.

\section Overview
The class fastuidraw::Painter implements canvas rendering using an implementation
of the backend interface fastuidraw::PainterBackend to send data to a 3D API.
The class fastuidraw::Painter packs data that is used by multiple triangles
into fastuidraw::PainterDrawCommand::m_store (for example the current transformation).
In implementing a backend, the shader fed to the GPU needs to correctly unpack
this data. The location of the header of the data is stored in the attribute
from the value fastuidraw::PainterDrawCommand::m_header_attributes. The header
consists of fastuidraw::PainterHeader::header_size uint32_t values whose location
relative to the start of the header and meaning are enumerated by
fastuidraw::PainterHeader::offset_t. The header contains shader ID's
and additional offsets to more data packed for a shader to unpack.

@}

\defgroup GLBackend GL Backend
@{
\brief
Implementation of a backend using the OpenGL (or OpenGL ES) GPU API.
@}

\defgroup GLUtility GL Utility
@{
\brief
Collection of utility interfaces used by \ref GLBackend that an application
may wish to use as well.
@}
*/

/*!
  \brief all classes and functions of FastUIDraw are in the
         namespace fastuidraw.
 */
namespace fastuidraw {

/*!\addtogroup GLSL
  @{
 */
  /*!
    \brief Namespace to encapsulate shader building to GLSL
           shaders, part of the main library libFastUIDraw.
   */
  namespace glsl
  {
  }
/*! @} */

  /*!
    \brief Namespace to encapsulate GL backend end implementation,
    utility functions and utility classes. Part of the GL
    backend libraries, libFastUIDrawGL and libFastUIDrawGLES.
  */
  namespace gl
  {

/*!\addtogroup GLUtility
  @{
 */
    /*!
      \brief Template version for setting an of uniform values
      \param location location of uniform, i.e. return value
             of glGetUniformLocation
      \param v array of values
      \param count number of elements from the array v to use.
    */
    template<typename T>
    void
    Uniform(int location, GLsizei count, const T *v);

    /*!
      \brief Template version for setting an array of matrix uniform values.
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param count number of elements from the array v to use.
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    Uniform(int location, GLsizei count, const matrixNxM<T, N, M> *v, bool transposed = false);

    /*!
      \brief Template version for setting a single uniform value.
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
                      \param v value
    */
    template<typename T, size_t N>
    void
    Uniform(int location, const vecN<T, N> &v);

    /*!
      \brief Template version for setting a single matrix uniform value.
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    Uniform(int location, const matrixNxM<T, N, M> &v, bool transposed = false);

    /*!
      \brief Template version for setting an of uniform values
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v array of values
      \param count number of elements from the array v to use.
    */
    template<typename T>
    void
    ProgramUniform(GLuint program, int location, GLsizei count, const T *v);

    /*!
      \brief Template version for setting an array of matrix uniform values.
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param count number of elements from the array v to use.
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    ProgramUniform(GLuint program, int location, GLsizei count, const matrixNxM<T, N, M> *v, bool transposed = false);

    /*!
      \brief Template version for setting a single uniform value.
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
    */
    template<typename T, size_t N>
    void
    ProgramUniform(GLuint program, int location, const vecN<T, N> &v);

    /*!
      \brief Template version for setting a single matrix uniform value.
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    ProgramUniform(GLuint program, int location, const matrixNxM<T, N, M> &v, bool transposed = false);

    /*! @} */
  }
}

/*! \mainpage FastUIDraw

  \section Purpose

  Fast UI Draw is a library that provides a higher performance Canvas interface.
  It is designed so that it always draws using a GPU.

  In contrast to many common implementations of Canvas drawing, Fast UI Draw
  has that changes in clipping are very cheap and optimized for GPU's. In
  addition, Fast UI Draw has, with the GL backend, very few pipeline states.
  Indeed an API trace of an application using Fast UI Draw will see only a
  handful of draw calls per frame, even under high Canvas state trashing,
  and high clip state changes. Indeed, for the GL backend, only one Canvas
  state change invokes a pipeline state change: changing the blend mode.

  In addition, Fast UI Draw gives an application the ability to make their
  own shaders for custom drawing.

  \section Concepts

  FastUIDraw strongly seperates what to draw from how to draw. The what to
  draw is essentially immutable attribute data to fed to shaders. Examples
  of attribute data are \ref fastuidraw::StrokedPath, \ref fastuidraw::FilledPath,
  \ref fastuidraw::GlyphRun and \ref fastuidraw::GlyphSequence. The how to
  draw is represented by a small amount of data interpreted by a shader to
  change how to draw. Examples of such are \ref fastuidraw::PainterBrush,
  \ref fastuidraw::PainterStrokeParams and \ref fastuidraw::PainterDashedStrokeParams.
  Changing the "how" to draw is a cheap operation allowing for greater dynamic
  scenes with greater detail wherer the load of rendering is carried by the
  GPU. For futher details on the "what" to draw, see \ref PainterAttribute.
  For futher details on "how" to draw, see \ref PainterShaders.

  FastUIDraw implements the following vertex-pipeline
  - the local item xy-coordinates and brush coordinates from the item shader
    (see \ref fastuidraw::PainterItemShader)
  - the local item xy-coordinates are multipled by the current 3x3 transformation
    matrix (see \ref fastuidraw::Painter::transformation) to convert from local
    item coordinates to clip-coordinates

  FastUIDraw implements the following pixel-pipeline
  - computation of RGBA from the item shader (see \ref fastuidraw::PainterItemShader)
  - computation of RGBA value from brush (see \ref fastuidraw::PainterBrush and \ref fastuidraw::PainterCustomBrush)
  - Above values are component-wise multipled and then blending is appled (see \ref fastuidraw::PainterBlendShader)

  \section Examples
  - See \ref ex_framework for the example framework to get started with the examples.
  - See \ref ex_initialization for the how to create a \ref fastuidraw::Painter.
  - See \ref ex_text for an example of using \ref fastuidraw::GlyphSequence to draw text with \ref fastuidraw::Painter.
  - See \ref ex_gradient for an example of using \ref fastuidraw::PainterBrush to render gradients.
  - See \ref ex_image for an example of using \ref fastuidraw::PainterBrush to render an image.
  - See \ref ex_path for an example of using \ref fastuidraw::Path to stroke and fill paths.
  - See \ref ex_path2 for creating a \ref fastuidraw::Path with the operator<< overloads and filling it with a custom fill rule.
*/
