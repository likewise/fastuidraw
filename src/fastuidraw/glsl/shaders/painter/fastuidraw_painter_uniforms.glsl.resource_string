/*!
 * \file fastuidraw_painter_uniforms.glsl.resource_string
 * \brief file fastuidraw_painter_uniforms.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */

/*!\addtogroup GLSLVertFragCode
 * @{
 */
#ifdef GLSL_DOXYGEN

  /*!
   * \def FASTUIDRAW_PAINTER_NUMBER_CONTEXT_TEXTURES
   * The maximum number of simutaneous bound textures that the shader
   * supports, i.e. the value of \ref
   * fastuidraw::PainterEngine::ConfigurationBase::number_context_textures().
   */
  #define FASTUIDRAW_PAINTER_NUMBER_CONTEXT_TEXTURES

  /*!
   * The array of \ref fastuidraw::Image objects whose \ref fastuidraw::Image::type()
   * has value \ref fastuidraw::Image::context_texture2d that are currently bound.
   * For \ref fastuidraw::PainterBrush if it has such an image, it is always bound
   * to fastuidraw_context_texture[0] and for \ref fastuidraw::PainterBrushShaderData,
   * the i'th index into \ref fastuidraw::PainterBrushShaderData is bound to
   * fastuidraw_context_texture[i]
   */
  uniform sampler2D fastuidraw_context_texture[FASTUIDRAW_PAINTER_NUMBER_CONTEXT_TEXTURES];

  /*!
   * \def FASTUIDRAW_SUPPORT_BINDLESS_TEXTURE
   * If this macro is defined, then bindless texturing is supported.
   * Bindless texturing allows one to create sampler object handles
   * from 64-bit uint data. See \ref FASTUIDRAW_BINDLESS_HANDLE_UVEC2
   * and \ref FASTUIDRAW_BINDLESS_HANDLE_128U for how the GLSL
   * implementation realizes the 64-bit handle values.
   */
  #define FASTUIDRAW_SUPPORT_BINDLESS_TEXTURE

  /*!
   * \def FASTUIDRAW_BINDLESS_HANDLE_UVEC2
   * If this macro is defined, then bindless texturing is supported
   * (see \ref FASTUIDRAW_SUPPORT_BINDLESS_TEXTURE) and the 64-bit
   * handle from which to construct sampler handles is realized as
   * a uvec2 where the low 32-bits are in the .x component and the
   * high 32-bits are in the .y component.
   */
  #define FASTUIDRAW_BINDLESS_HANDLE_UVEC2

  /*!
   * \def FASTUIDRAW_BINDLESS_HANDLE_128U
   * If this macro is defined, then bindless texturing is supported
   * (see \ref FASTUIDRAW_SUPPORT_BINDLESS_TEXTURE) and the 64-bit
   * handle from which to construct sampler handles is realized as
   * a uint64_t.
   */
  #define FASTUIDRAW_BINDLESS_HANDLE_128U

  /*!
   * \def fastuidraw_fetch_data(X)
   * Use this macro to fetch a single 128-bit value from the data
   * store bufferrealized as a uvec4. To get floating point data,
   * use the GLSL built-in function uintBitsToFloat().
   * \param X offset into data store buffer
   */
  #define fastuidraw_fetch_data(X)
#endif
/*! @} */

///@cond

///////////////////////////////////////
// Painter Data Store
#ifdef FASTUIDRAW_PAINTER_USE_DATA_TBO

  FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_PAINTER_STORE_BINDING) uniform usamplerBuffer fastuidraw_painterStore_tbo;
  #define fastuidraw_fetch_data(block) texelFetch(fastuidraw_painterStore_tbo, int(block))

#elif defined(FASTUIDRAW_PAINTER_USE_DATA_SSBO)

  FASTUIDRAW_LAYOUT_BINDING_ARGS(FASTUIDRAW_PAINTER_STORE_BINDING, std430) restrict readonly buffer fastuidraw_painterStore_ssbo
  {
    uvec4 fastuidraw_painterStore[];
  };
 #define fastuidraw_fetch_data(block) fastuidraw_painterStore[int(block)]

#elif defined(FASTUIDRAW_PAINTER_USE_DATA_UBO)

  FASTUIDRAW_LAYOUT_BINDING_ARGS(FASTUIDRAW_PAINTER_STORE_BINDING, std140) uniform fastuidraw_painterStore_ubo
  {
    uvec4 fastuidraw_painterStore[FASTUIDRAW_PAINTER_DATA_STORE_ARRAY_SIZE];
  };
  #define fastuidraw_fetch_data(block) fastuidraw_painterStore[int(block)]

#endif

FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_PAINTER_CONTEXT_TEXTURE_BINDING) uniform sampler2D fastuidraw_context_texture[FASTUIDRAW_PAINTER_NUMBER_CONTEXT_TEXTURES];

///@endcond
